/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.form;

import inventory.Inventory_ProductList;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class Inventory_ProductPriceForm extends javax.swing.JDialog {

    /**
     * Creates new form Inventory_ProductForm
     */
    Inventory_ProductList inventory_productlist;
    String validated_fields = "Please check the ff. fields:\n\n";

    Connection connection = null;
    Statement statement;
    ResultSet result;

    String User_ID = "404", Product_No = "404";
    Boolean selected = false;

    DefaultTableModel price_dtm;

    public Inventory_ProductPriceForm(java.awt.Frame parent, boolean modal, Inventory_ProductList inventory_productlist) {
        super(parent, modal);
        initComponents();
        this.inventory_productlist = inventory_productlist;
        this.connection = inventory_productlist.connection;

        showQuery("SELECT * FROM productpricelist p;");
        setLocationRelativeTo(parent);
    }

    public Inventory_ProductPriceForm(java.awt.Frame parent, boolean modal, Inventory_ProductList inventory_productlist, String Product_No) {
        super(parent, modal);
        initComponents();
        this.inventory_productlist = inventory_productlist;
        this.connection = inventory_productlist.connection;
        this.Product_No = Product_No;

        field_search.setText(Product_No);
        field_search.setEnabled(false);
        but_search.setVisible(false);
        selected = true;

        price_dtm = (DefaultTableModel) jTable1.getModel();

        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        but_save = new javax.swing.JButton();
        but_cancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        field_search = new javax.swing.JTextField();
        but_search = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        but_applyselected = new javax.swing.JButton();
        field_price = new javax.swing.JFormattedTextField();
        but_applyall = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PRODUCT PRICE");
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 204, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 0));
        jLabel1.setText("PRODUCT PRICE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 0));

        but_save.setText("POST");
        but_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_saveActionPerformed(evt);
            }
        });

        but_cancel.setText("CLOSE");
        but_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(but_save, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(but_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(but_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(but_save, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTable1.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "", "PRODUCT", "Old Price", "New Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(1).setMinWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(20);
            jTable1.getColumnModel().getColumn(2).setMinWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        field_search.setText("Search here. . .");
        field_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_searchFocusLost(evt);
            }
        });
        field_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field_searchActionPerformed(evt);
            }
        });
        field_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                field_searchKeyReleased(evt);
            }
        });

        but_search.setText("Search");
        but_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_searchActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("NEW PRICE");

        but_applyselected.setText("Apply All Selected");
        but_applyselected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_applyselectedActionPerformed(evt);
            }
        });

        field_price.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        field_price.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        field_price.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        field_price.setText("0.00");
        field_price.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_priceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_priceFocusLost(evt);
            }
        });

        but_applyall.setText("Select All");
        but_applyall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_applyallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_price)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_applyselected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_applyall, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(field_search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_search)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(but_search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(field_search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(but_applyall, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(but_applyselected, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(field_price, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void but_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_cancelActionPerformed
        // TODO add your handling code here:
        if (!but_save.isVisible()) {
            dispose();
            return;
        }
        int x = JOptionPane.showConfirmDialog(this, "Do you really want to cancel adding/updating user?", "CONFIRMATION", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (x == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_but_cancelActionPerformed

    private void but_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_saveActionPerformed
        // TODO add your handling code here:

        if (validate_field()) {
            JOptionPane.showConfirmDialog(this, validated_fields, "D-TECH WARNING", JOptionPane.PLAIN_MESSAGE, JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!Product_No.equalsIgnoreCase("404")) {

            int x = JOptionPane.showConfirmDialog(this, "Do you really want to update the selected item price", "CONFIRMATION", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (x == JOptionPane.YES_OPTION) {
                try {
//                Cost_No., Product_No., Old_Cost, Old_Cost_Date, New_Cost, New_Cost_Date, User_ID, Datetime_Created, Datetime_Updated
                    statement = connection.createStatement();
                    statement.executeUpdate("insert into product_price values('CST-"
                            + Product_No + "','"
                            + Product_No + "','"
                            + jTable1.getValueAt(0, 3) + "','"
                            + new SimpleDateFormat("yyyy-MM-d HH:mm:ss").format(new Date()) + "','"
                            + jTable1.getValueAt(0, 4) + "','"
                            + new SimpleDateFormat("yyyy-MM-d HH:mm:ss").format(new Date()) + "','"
                            + inventory_productlist.inventory_mainframe.userID + "','"
                            + new SimpleDateFormat("yyyy-MM-d HH:mm:ss").format(new Date()) + "','"
                            + new SimpleDateFormat("yyyy-MM-d HH:mm:ss").format(new Date()) + "')");

                    statement.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                JOptionPane.showConfirmDialog(this, "Updating Cost has been successfully posted.", "INFORMATION", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE);

                dispose();
            } else {
                return;
            }

            clearfield();
            return;
        }
        try {

            int x = JOptionPane.showConfirmDialog(this, "Do you really want to update the selected item price", "CONFIRMATION", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (x == JOptionPane.YES_OPTION) {
                statement = connection.createStatement();
                String Datetime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
                for (int row = 0; row < jTable1.getRowCount(); row++) {
//                    System.out.println("jTable1.getValueAt(row, 0).toString() >>> " + (jTable1.getValueAt(row, 1).toString()));
                    if ((boolean) Boolean.parseBoolean(jTable1.getValueAt(row, 1).toString())) {
//                        Event_Cost_No., Cost_No., Old_Cost, Old_Cost_Date
//                        Cost_No., Product_No., Old_Cost, Old_Cost_Date, New_Cost, New_Cost_Date, User_ID, Datetime_Created, Datetime_Updated

                        System.out.println("Saving Event Ref. No. " + jTable1.getValueAt(row, 0));
                        System.out.println("insert into product_price_history values(concat('EVT','" + inventory_productlist.inventory_mainframe.Company_No + "-" + Datetime + "00" + row + "'),'"
                                + jTable1.getValueAt(row, 0) + "',"
                                + jTable1.getValueAt(row, 3) + ","
                                + "(select old_price_date from product_price where `price_No.` = '" + jTable1.getValueAt(row, 0) + "') )");
                        statement.executeUpdate("insert into product_price_history values(concat('EVT','" + inventory_productlist.inventory_mainframe.Company_No + "-" + Datetime + "00" + row + "'),'"
                                + jTable1.getValueAt(row, 0) + "',"
                                + jTable1.getValueAt(row, 3) + ","
                                + "(select old_price_date from product_price where `price_No.` = '" + jTable1.getValueAt(row, 0) + "') )");

                        System.out.println("Updating Price No. " + jTable1.getValueAt(row, 0));
                        System.out.println("update product_price set old_price = new_price, "
                                + "old_price_date = new_price_date, "
                                + "new_price = " + jTable1.getValueAt(row, 4) + ", new_price_date = '" + new SimpleDateFormat("yyyy:MM:dd").format(new Date()) + "' where `Price_No.` = '" + jTable1.getValueAt(row, 0) + "'");
                        statement.executeUpdate("update product_price set old_price = new_price, "
                                + "old_price_date = new_price_date, "
                                + "new_price = " + jTable1.getValueAt(row, 4) + ", new_price_date = '" + new SimpleDateFormat("yyyy:MM:dd").format(new Date()) + "' where `Price_No.` = '" + jTable1.getValueAt(row, 0) + "'");
                    }

                }
                statement.close();
            } else {
                return;
            }
            JOptionPane.showConfirmDialog(this, "Updating Price has been successfully posted.", "INFORMATION", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE);

            dispose();

        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, e.getMessage(), "D-TECH WARNING", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            dispose();
        }

        clearfield();
    }//GEN-LAST:event_but_saveActionPerformed

    private void but_applyselectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_applyselectedActionPerformed
        // TODO add your handling code here:
        if (jTable1.getRowCount() > 0) {

            if (but_applyselected.getText().equalsIgnoreCase("Apply All Selected")) {
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    if ((boolean) Boolean.parseBoolean(jTable1.getValueAt(row, 1).toString())) {
                        jTable1.setValueAt(field_price.getText(), row, 4);
                    }
                }
                but_applyselected.setText("Cancel");
                but_applyall.setText("Select All");
            } else {
                field_searchActionPerformed(evt);
                but_applyselected.setText("Apply All Selected");
            }
        }
    }//GEN-LAST:event_but_applyselectedActionPerformed

    private void field_priceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_priceFocusLost
        // TODO add your handling code here:
        if (field_price.getText().isEmpty()) {
            field_price.setText("0.00");
        }
    }//GEN-LAST:event_field_priceFocusLost

    private void but_applyallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_applyallActionPerformed
        // TODO add your handling code here:
        if (jTable1.getRowCount() > 0) {
            if (but_applyall.getText().equalsIgnoreCase("Select All")) {
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    jTable1.setValueAt(true, row, 1);
                }
                but_applyall.setText("Cancel");
                but_applyselected.setText("Apply All Selected");
            } else {
                field_searchActionPerformed(evt);
                but_applyall.setText("Select All");
            }
        }
    }//GEN-LAST:event_but_applyallActionPerformed

    private void field_searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_searchFocusGained
        // TODO add your handling code here:
        if (field_search.getText().equalsIgnoreCase("Search here. . .")) {
            field_search.setText(null);
        }
    }//GEN-LAST:event_field_searchFocusGained

    private void field_searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_searchFocusLost
        // TODO add your handling code here:
        if (field_search.getText().isEmpty()) {
            field_search.setText("Search here. . .");
        }
    }//GEN-LAST:event_field_searchFocusLost

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (jTable1.getSelectedRow() > -1 && jTable1.getSelectedColumn() > -1) {
            jTable1.setToolTipText(jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()).toString());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void field_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field_searchActionPerformed
        // TODO add your handling code here:
        if (field_search.getText().isEmpty()) {
            showQuery("SELECT * FROM productpricelist p;");
        } else {
            showQuery("SELECT * FROM productpricelist p where product like '%" + field_search.getText() + "%';");
        }
    }//GEN-LAST:event_field_searchActionPerformed

    private void field_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_searchKeyReleased
        // TODO add your handling code here:
        if (field_search.getText().isEmpty()) {
            showQuery("SELECT * FROM productpricelist p;");
        } else {
            showQuery("SELECT * FROM productpricelist p where product like '%" + field_search.getText() + "%';");
        }
    }//GEN-LAST:event_field_searchKeyReleased

    private void but_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_searchActionPerformed
        // TODO add your handling code here:
        field_searchActionPerformed(evt);
    }//GEN-LAST:event_but_searchActionPerformed

    private void field_priceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_priceFocusGained
        // TODO add your handling code here:
        if (field_price.getText().equalsIgnoreCase("0.00")) {
            field_price.setText(null);
        }
    }//GEN-LAST:event_field_priceFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_applyall;
    private javax.swing.JButton but_applyselected;
    private javax.swing.JButton but_cancel;
    private javax.swing.JButton but_save;
    private javax.swing.JButton but_search;
    private javax.swing.JFormattedTextField field_price;
    private javax.swing.JTextField field_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void resettable() {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "#", "", "PRODUCT", "Old Price", "New Price"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(1).setMinWidth(20);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(20);
            jTable1.getColumnModel().getColumn(2).setMinWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        price_dtm = (DefaultTableModel) jTable1.getModel();
    }

    private boolean validate_field() {
        boolean validate = true;
        validated_fields = "Please check the ff. fields:\n\n ";

        for (int row = 0; row < jTable1.getRowCount(); row++) {
            if ((boolean) Boolean.parseBoolean(jTable1.getValueAt(row, 1).toString())) {
                validate = false;
            }
        }
        if (validate) {
            validated_fields = validated_fields + "* Please select an item to update price.\n";
        }
        return validate;
    }

    private void clearfield() {
        field_search.setText("Search here. . .");
        field_searchActionPerformed(null);
    }

    public void showQuery(String query) {
        resettable();
        System.out.println(query);
        try {
            statement = connection.createStatement();
            result = statement.executeQuery(query);
            while (result.next()) {
//                Cost_No., Product, Old_Price, New_Price
//                    "#", "", "PRODUCT", "Old Price", "New Price"
                price_dtm.addRow(new Object[]{result.getString(1),
                    selected,
                    result.getString(2),
                    result.getString(3),
                    result.getString(4)});
            }
            statement.close();
            result.close();
            if (price_dtm.getRowCount() <= 0) {
                generateprice(Product_No);
            } else {
                Product_No = "404";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void generateprice(String Product_No) {
        try {
            statement = connection.createStatement();
            result = statement.executeQuery("select concat('PRC-',`product_no.`)as `Cost_No.`, concat(`product_no.`,'-',short_description)as Product, '0.00','0.00' from product where `product_no.` = '" + Product_No + "';");
            while (result.next()) {
//                Cost_No., Product, Old_Price, New_Price
//                    "#", "", "PRODUCT", "Old Price", "New Price"
                price_dtm.addRow(new Object[]{result.getString(1),
                    selected,
                    result.getString(2),
                    result.getString(3),
                    result.getString(4)});
            }
            statement.close();
            result.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
